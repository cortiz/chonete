/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */
group 'com.jmpeax'
version '0.1.0-SNAPSHOT'
description "Simple CLI MultiServer SQL client"


buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Add dependency for build script,
        // so we can access Git from our
        // build script.
        classpath 'org.ajoberstar:grgit:1.1.0'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE"
    }
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: "jacoco"
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'osgi'
apply plugin: "com.github.hierynomus.license"
apply plugin: 'org.springframework.boot'


ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(dir:".")
    // Get commit id of HEAD.
    revision = git.head().id
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}


checkstyle {
    configFile = rootProject.file('buildtools/checkstyle.xml')
    toolVersion ="8.4"
}

license { header = file('buildtools/LHEADER') }

springBoot {
    executable = true
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
}
sourceSets {
    test {
        java.srcDir 'src/test/unit/java'
        resources.srcDir 'src/test/unit/resources'
    }
    integration {
        java.srcDir 'src/test/integration/java'
        resources.srcDir 'src/test/integration/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useTestNG()// enable TestNG support (default is JUnit)
}

dependencies {
    testCompile  group: 'org.testng', name: 'testng', version: '6.11'
    testCompile  group: 'org.mockito', name: 'mockito-core', version: '2.8.9'
    compile      group: 'org.springframework.boot', name:'spring-boot-starter', version: '1.5.6.RELEASE'
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'org.springframework.shell', name: 'spring-shell-starter', version: '2.0.0.M1'
    compile 'org.springframework.shell:spring-shell-starter:2.0.0.M2'

}


jar{
    manifest{
        attributes(
                "BuildId": "${revision}"
        )
    }
}

jacocoTestReport{
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}
